name: create infrastructure

on:
  workflow_dispatch
#  push:
    # при создании pull request на main
#    branches: [ main ]

jobs:
  create_cluster:
    runs-on: ubuntu-latest
    env:
      ya_cluster_name: ${{ vars.YA_CLUSTER_NAME }}
      ya_network-name: default
      ya_zone: ru-central1-a
      ya_subnet: default-ru-central1-a
      ya_account: svckursovik
      ya_cloud_id: b1gi91nvj5m7ajci95v9
      ya_folder_id: b1g38fjsltr2a35lkcg3
   
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name:  install yandex cli
        uses: nightstory/setup-yc@v1
        with:
          enable-cache: true

      - run: 'echo "$YA_KEY" > key.json'
        shell: bash
        env:
          YA_KEY: ${{ secrets.YC_SA }}
   
      - name: set yandex env
        run: |
          yc config set cloud-id ${{ env.ya_cloud_id }}
          yc config set folder-id ${{ env.ya_folder_id }}
          yc config set service-account-key key.json
   
#      - name: install kubectl
#        run: |
#          sudo apt-get update && sudo apt-get install -y apt-transport-https
#          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
#          echo "deb http://packages.cloud.google.com/apt/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
#          sudo apt-get update
#          sudo apt-get install -y kubectl
#      

      - name: install kubectl
        uses: azure/setup-kubectl@v3
        id: install


#      - name: install kubectl
#        run: |
#          mkdir -p /etc/apt/keyrings
#          sudo apt-get install -y apt-transport-https ca-certificates curl
#          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg  --no-tty --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
#          sudo apt-get update
#          sudo apt-get install -y kubectl


#          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
#          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#          sudo apt-get update


#          sudo apt-add-repository 'deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
 #         curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
 #         sudo apt-get update

      - name: set yandex env
        run: |
          yc config set cloud-id ${{ env.ya_cloud_id }}
          yc config set folder-id ${{ env.ya_folder_id }}
          yc config set service-account-key key.json
          yc managed-kubernetes cluster get-credentials ${{ env.ya_cluster_name }} --external

      - name: view config
        run: |
          kubectl config view
          kubectl cluster-info

      - name: install ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/AlexClev/otusproject/main/ingress/ingress-deploy.yaml

      - name: install argocd
        run: |
          kubectl create secret tls argocd-server-tls --cert='F:\GITOTIS\Project\argocd\tls.crt' --key='F:\GITOTIS\Project\argocd\tls.key' -n argocd
          kubectl apply -f https://raw.githubusercontent.com/AlexClev/otusproject/main/argocd/argocd-deploy.yaml







          
